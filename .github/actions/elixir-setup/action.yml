name: Setup Elixir Project
description: Checks out the code, configures Elixir, fetches dependencies, and manages build caching.
inputs:
  elixir-version:
    required: true
    type: string
    description: Elixir version to set up
  otp-version:
    required: true
    type: string
    description: OTP version to set up
  ##########################################################
  # Optional below, might be suboptimal
  ##########################################################
  build-deps:
    required: false
    type: boolean
    default: true
    description: True if dependencies should be compiled
  build-app:
    required: false
    type: boolean
    default: true
    description: True if application itself should be compiled
  build-flags:
    required: false
    type: string
    default: "--all-warnings"
    description: Flags to pass to mix compile
  install-rebar:
    required: false
    type: boolean
    default: true
    description: Default is Rebar install (mix local.rebar --force)
  install-hex:
    required: false
    type: boolean
    default: true
    description: Default is Hex install (mix local.hex --force)
  cache-key:
    required: false
    type: string
    default: "v1"
    description: If cache reset is needed, change this key.
outputs:
  otp-version:
    description: "Exact OTP version selected by the BEAM setup step"
    value: ${{ steps.beam.outputs.elixir-version }}
  elixir-version:
    description: "Exact Elixir version selected by the BEAM setup step"
    value: ${{ steps.beam.outputs.elixir-version }}
runs:
  using: "composite"
  steps:

    - name: Check Runner OS
      run: echo "Runner OS is ${{ runner.os }}"
      shell: sh

    - name: Setup Elixir
      uses: erlef/setup-beam@v1
      id: beam
      with:
        elixir-version: ${{ inputs.elixir-version }}
        otp-version: ${{ inputs.otp-version }}
    
    - name: Get Deps Cache
      uses: actions/cache@v4
      with:
        path: deps/
        key: deps-${{ inputs.cache-key }}-${{ runner.os }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          deps-${{ inputs.cache-key }}-${{ runner.os }}-
    
    - name: Get Build Cache
      uses: actions/cache@v4
      id: build-cache
      with:
        path: _build/${{ env.MIX_ENV }}/
        key: build-${{ inputs.cache-key }}-${{ runner.os }}-${{ inputs.otp-version }}-${{ inputs.elixir-version }}-${{ env.MIX_ENV }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          build-${{ inputs.cache-key }}-${{ runner.os }}-${{ inputs.otp-version }}-${{ inputs.elixir-version }}-${{ env.MIX_ENV }}-
    
    - name: Get Hex Cache
      uses: actions/cache@v4
      id: hex-cache
      with:
        path: ~/.hex
        key: hex-${{ inputs.cache-key }}-${{ runner.os }}-${{ inputs.otp-version }}-${{ inputs.elixir-version }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          hex-${{ inputs.cache-key }}-${{ runner.os }}-${{ inputs.otp-version }}-${{ inputs.elixir-version }}-

    - name: Get Mix cache
      uses: actions/cache@v4
      id: mix-cache
      with:
        path: ${{ env.MIX_HOME || '~/.mix' }}
        key: mix-${{ inputs.cache-key }}-${{ runner.os }}-${{ inputs.otp-version }}-${{ inputs.elixir-version }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          mix-${{ inputs.cache-key }}-${{ runner.os }}-${{ inputs.otp-version }}-${{ inputs.elixir-version }}-

    - name: Clean to rule out incremental build as a source of flakiness
      if: github.run_attempt != '1'
      run: | 
        mix deps.clean --all
        mix clean
      shell: sh

    - name: Install Rebar
      run: mix local.rebar --force --if-missing
      shell: sh
      if: inputs.install-rebar == 'true'

    - name: Install Hex
      run: mix local.hex --force --if-missing
      shell: sh
      if: inputs.install-hex == 'true'

    - name: Install Dependencies
      run: mix deps.get
      shell: sh

    - name: Compile Dependencies
      run: mix loadpaths
      shell: sh
      if: inputs.build-deps == 'true'

    - name: Compile Application
      run: mix compile ${{ inputs.build-flags }}
      shell: sh
      if: inputs.build-app == 'true'